const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

async function testAuthModule() {
  console.log('üß™ Testando m√≥dulo de autentica√ß√£o...\n');

  try {
    // Teste 1: Login com credenciais v√°lidas de admin
    console.log('1Ô∏è‚É£ Testando login de admin...');
    try {
      const adminResponse = await axios.post(`${BASE_URL}/auth/login`, {
        login: 'admin@example.com',
        password: 'admin123'
      });
      
      console.log('‚úÖ Login admin bem-sucedido');
      console.log('   - Token recebido:', adminResponse.data.access_token ? 'Sim' : 'N√£o');
      console.log('   - Usu√°rio:', adminResponse.data.user);
      
      const adminToken = adminResponse.data.access_token;
      
      // Teste 2: Verificar se o token funciona em uma rota protegida
      console.log('\n2Ô∏è‚É£ Testando acesso com token de admin...');
      try {
        const protectedResponse = await axios.get(`${BASE_URL}/admin`, {
          headers: { Authorization: `Bearer ${adminToken}` }
        });
        console.log('‚úÖ Acesso protegido com token admin funcionando');
      } catch (error) {
        console.log('‚ùå Erro no acesso protegido:', error.response?.data?.message || error.message);
      }
      
    } catch (error) {
      console.log('‚ùå Erro no login admin:', error.response?.data?.message || error.message);
    }

    // Teste 3: Login com credenciais v√°lidas de empresa
    console.log('\n3Ô∏è‚É£ Testando login de empresa...');
    try {
      const companyResponse = await axios.post(`${BASE_URL}/auth/login`, {
        login: 'empresa@example.com',
        password: 'company123'
      });
      
      console.log('‚úÖ Login empresa bem-sucedido');
      console.log('   - Token recebido:', companyResponse.data.access_token ? 'Sim' : 'N√£o');
      console.log('   - Usu√°rio:', companyResponse.data.user);
      
      const companyToken = companyResponse.data.access_token;
      
      // Teste 4: Verificar se o token funciona em uma rota protegida
      console.log('\n4Ô∏è‚É£ Testando acesso com token de empresa...');
      try {
        const protectedResponse = await axios.get(`${BASE_URL}/company`, {
          headers: { Authorization: `Bearer ${companyToken}` }
        });
        console.log('‚úÖ Acesso protegido com token empresa funcionando');
      } catch (error) {
        console.log('‚ùå Erro no acesso protegido:', error.response?.data?.message || error.message);
      }
      
    } catch (error) {
      console.log('‚ùå Erro no login empresa:', error.response?.data?.message || error.message);
    }

    // Teste 5: Login com credenciais v√°lidas de vendedor
    console.log('\n5Ô∏è‚É£ Testando login de vendedor...');
    try {
      const sellerResponse = await axios.post(`${BASE_URL}/auth/login`, {
        login: 'vendedor@example.com',
        password: 'seller123'
      });
      
      console.log('‚úÖ Login vendedor bem-sucedido');
      console.log('   - Token recebido:', sellerResponse.data.access_token ? 'Sim' : 'N√£o');
      console.log('   - Usu√°rio:', sellerResponse.data.user);
      
      const sellerToken = sellerResponse.data.access_token;
      
      // Teste 6: Verificar se o token funciona em uma rota protegida
      console.log('\n6Ô∏è‚É£ Testando acesso com token de vendedor...');
      try {
        const protectedResponse = await axios.get(`${BASE_URL}/seller`, {
          headers: { Authorization: `Bearer ${sellerToken}` }
        });
        console.log('‚úÖ Acesso protegido com token vendedor funcionando');
      } catch (error) {
        console.log('‚ùå Erro no acesso protegido:', error.response?.data?.message || error.message);
      }
      
    } catch (error) {
      console.log('‚ùå Erro no login vendedor:', error.response?.data?.message || error.message);
    }

    // Teste 7: Login com credenciais inv√°lidas
    console.log('\n7Ô∏è‚É£ Testando login com credenciais inv√°lidas...');
    try {
      await axios.post(`${BASE_URL}/auth/login`, {
        login: 'invalid@example.com',
        password: 'wrongpassword'
      });
      console.log('‚ùå Login com credenciais inv√°lidas deveria ter falhado');
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Login com credenciais inv√°lidas corretamente rejeitado');
      } else {
        console.log('‚ùå Erro inesperado:', error.response?.data?.message || error.message);
      }
    }

    // Teste 8: Acesso sem token
    console.log('\n8Ô∏è‚É£ Testando acesso sem token...');
    try {
      await axios.get(`${BASE_URL}/admin`);
      console.log('‚ùå Acesso sem token deveria ter falhado');
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Acesso sem token corretamente rejeitado');
      } else {
        console.log('‚ùå Erro inesperado:', error.response?.data?.message || error.message);
      }
    }

    // Teste 9: Token inv√°lido
    console.log('\n9Ô∏è‚É£ Testando acesso com token inv√°lido...');
    try {
      await axios.get(`${BASE_URL}/admin`, {
        headers: { Authorization: 'Bearer invalid-token' }
      });
      console.log('‚ùå Acesso com token inv√°lido deveria ter falhado');
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Acesso com token inv√°lido corretamente rejeitado');
      } else {
        console.log('‚ùå Erro inesperado:', error.response?.data?.message || error.message);
      }
    }

    console.log('\nüéâ Testes do m√≥dulo de autentica√ß√£o conclu√≠dos!');

  } catch (error) {
    console.error('‚ùå Erro geral nos testes:', error.message);
  }
}

// Executar testes se o script for chamado diretamente
if (require.main === module) {
  testAuthModule();
}

module.exports = { testAuthModule };
